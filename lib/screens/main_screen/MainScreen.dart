import 'package:firebase_exploiter/database/my_firebase.dart';
import 'package:firebase_exploiter/widgets/dialogs.dart';
import 'package:firedart/firedart.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:get/get.dart';
import 'package:url_launcher/url_launcher.dart';

class MainScreen extends StatelessWidget {
  MainScreen({super.key});

  TextEditingController etProjectId = TextEditingController();
  TextEditingController etCollectionPath = TextEditingController();

  static RxList docs = [].obs;
  static RxBool isLoading = false.obs;

  static void addData(Document fieldsData) {
    docs.add(fieldsData);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Firestore Exploit'),
        actions: [
          Obx(() => docs.length > 0
              ? IconButton(
                  onPressed: () {
                    showAddDialog(
                      context,
                      path: etCollectionPath.text,
                    );
                  },
                  icon: const Icon(Icons.add))
              : const SizedBox()),
          IconButton(
            onPressed: () {
              launchUrl(
                  Uri.parse('https://github.com/H4zh4n/firebase-exploiter'),
                  mode: LaunchMode.externalApplication);
            },
            icon: Icon(Icons.info_outline),
          ),
        ],
      ),
      body: Container(
        padding: const EdgeInsets.only(left: 10, right: 10, bottom: 2),
        child: Column(
          children: [
            TextFormField(
              controller: etProjectId,
              decoration: const InputDecoration(
                  hintText: 'projectId', labelText: 'projectId'),
            ),
            TextFormField(
              controller: etCollectionPath,
              decoration: const InputDecoration(
                hintText: 'Collection path',
                labelText: 'Collection path',
              ),
            ),
            const SizedBox(
              height: 10,
            ),
            Center(
              child: Container(
                width: 300,
                child: Row(
                  children: [
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: () async {
                          isLoading.value = true;
                          await MyFirebase.initFirebase(etProjectId.text);
                          await MyFirebase.getAllDocuments(
                              path: etCollectionPath.text);
                          isLoading.value = false;
                        },
                        label: const Text('Load'),
                        icon: const Icon(Icons.keyboard_return),
                      ),
                    ),
                    Obx(() => Opacity(
                          opacity: isLoading.isTrue ? 1 : 0,
                          child: Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: CircularProgressIndicator(
                              color: Colors.blue,
                            ),
                          ),
                        )),
                  ],
                ),
              ),
            ),
            const SizedBox(
              height: 10,
            ),
            Expanded(
              child: Obx(
                () => ListView.separated(
                  itemBuilder: (context, index) {
                    final doc = docs.value[index];

                    return Container(
                      padding: const EdgeInsets.all(5),
                      decoration: BoxDecoration(
                          color: Colors.amber.withOpacity(0.20),
                          borderRadius: BorderRadius.circular(10)),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: [
                          //id
                          Center(
                            child: Wrap(
                              crossAxisAlignment: WrapCrossAlignment.center,
                              children: [
                                showValue('id = ${doc.id}',
                                    background: Colors.red),
                                showValue('path = ${doc.path}',
                                    background: Colors.deepPurple),
                              ],
                            ),
                          ),

                          const SizedBox(
                            height: 20,
                          ),
                          for (String keys in doc.map.keys) ...{
                            Container(
                              padding: const EdgeInsets.all(10),
                              decoration: BoxDecoration(
                                  color: Colors.pink.withOpacity(0.15),
                                  borderRadius: BorderRadius.circular(10)),
                              child: Wrap(
                                children: [
                                  showValue(keys, background: Colors.green),
                                  const SizedBox(
                                    width: 2,
                                  ),
                                  showValue(doc.map[keys]),
                                ],
                              ),
                            ),
                            const SizedBox(
                              height: 10,
                            ),
                          },

                          Row(
                            children: [
                              ElevatedButton.icon(
                                onPressed: () async {
                                  Get.defaultDialog(
                                    title: 'Delete document ?',
                                    content: Container(
                                        child: const Text(
                                            'Are you sure you want to delete this document ?')),
                                    textConfirm: 'Delete',
                                    onConfirm: () async {
                                      isLoading.value = true;

                                      bool result = await MyFirebase.deleteDoc(
                                          path: etCollectionPath.text,
                                          id: doc.id);

                                      if (result) {
                                        docs.removeAt(index);
                                      }

                                      Get.back();
                                      isLoading.value = false;
                                    },
                                    textCancel: 'Cancel',
                                    onCancel: () {
                                      Get.back();
                                    },
                                  );
                                },
                                label: const Text('Delete'),
                                icon: const Icon(Icons.delete),
                              ),
                              const SizedBox(
                                width: 10,
                              ),
                              ElevatedButton.icon(
                                onPressed: () async {
                                  isLoading.value = true;
                                  showUpdateDialog(
                                    context,
                                    path: etCollectionPath.text,
                                    docId: doc.id,
                                    data: doc.map,
                                  );

                                  isLoading.value = false;
                                },
                                label: const Text('Update'),
                                icon: const Icon(Icons.refresh),
                              ),
                            ],
                          ),
                        ],
                      ),
                    );
                  },
                  separatorBuilder: (BuildContext context, int index) {
                    return const Divider();
                  },
                  itemCount: docs.length,
                ),
              ),
            ),
            Wrap(
              crossAxisAlignment: WrapCrossAlignment.center,
              children: [
                InkWell(
                  borderRadius: BorderRadius.circular(30),
                  onTap: () {
                    launchUrl(Uri.parse('https://github.com/H4zh4n/'),
                        mode: LaunchMode.externalApplication);
                  },
                  child: Padding(
                    padding:
                        const EdgeInsets.symmetric(vertical: 1, horizontal: 8),
                    child: Wrap(
                      crossAxisAlignment: WrapCrossAlignment.center,
                      children: [
                        SvgPicture.asset(
                          'assets/icons/github.svg',
                          color: Colors.black,
                          height: 32,
                        ),
                        const SizedBox(
                          width: 2,
                        ),
                        const Text('Hazhan Jalal'),
                      ],
                    ),
                  ),
                ),
                const SizedBox(
                  width: 5,
                ),
                const Text('|'),
                const SizedBox(
                  width: 5,
                ),
                const Text('Unfinished product'),
              ],
            ),
          ],
        ),
      ),
    );
  }

  static Widget showValue(dynamic text,
      {Widget? leading, Color background = Colors.blue}) {
    return Container(
      margin: const EdgeInsets.all(2),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(10),
        color: background.withOpacity(0.50),
      ),
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 3),
        child: Wrap(
          children: [
            leading ?? const SizedBox(),
            Text(text.toString()),
          ],
        ),
      ),
    );
  }
}
