import 'dart:async';

import 'package:firebase_exploiter/screens/main_screen/MainScreen.dart';
import 'package:firedart/firedart.dart';
import 'package:get/get.dart';

class MyFirebase {
  static late Firestore fa;
  static late String projectId;

  static Future<bool> initFirebase(String pId) async {
    projectId = pId;

    try {
      Firestore.initialize(projectId);
      fa = Firestore.instance;
    } catch (e) {
      return false;
    }

    await Future.delayed(100.milliseconds);

    return true;
  }

  static Future<bool> getAllDocuments({required String path}) async {
    MainScreen.docs.clear();

    print('> loading data...');

    try {
      final documents = await fa.collection(path).get().whenComplete(() => () {
            print('here');
          });

      for (final doc in documents) {
        /*List<String> fields = [];

      fields.add('${doc.id}\n');
      for (String keys in doc.map.keys) {
        fields.add("$keys : ${doc.map[keys]}\n");
      }*/

        MainScreen.addData(doc);
      }

      print('> finished loading data.');
    } catch (e) {
      print('error $e');

      /*Get.showSnackbar(GetSnackBar(
        message: '$e',
        snackPosition: SnackPosition.BOTTOM,
        duration: 5000.milliseconds,
      ));*/

      return false;
    }

    return true;
  }

  static Future<bool> deleteDoc(
      {required String path, required String id}) async {
    print('> loading data...');

    try {
      await fa.collection(path).document(id).delete();

      return true;
      print('> finished loading data.');
    } catch (e) {
      print('error $e');

      /*Get.showSnackbar(GetSnackBar(
        message: '$e',
        snackPosition: SnackPosition.BOTTOM,
        duration: 5000.milliseconds,
      ));*/

      return false;
    }

    return true;
  }

  static Future<bool> addDocument({
    required String path,
    required Map<String, dynamic> data,
  }) async {
    try {
      final doc = await fa.collection(path).add(data);
      MainScreen.addData(doc);
      return true;
    } catch (e) {
      print('$e');
    }

    return false;
  }

  static Future<bool> updateOrSetDoc(
      {required String path,
      required String docId,
      required Map<String, dynamic> data,
      required bool isUpdate}) async {
    try {
      if (isUpdate) {
        await fa.collection(path).document(docId).update(data);
      } else {
        await fa.collection(path).document(docId).set(data);
      }

      await getAllDocuments(path: path);

      MainScreen.docs.refresh();

      return true;
    } catch (e) {
      print('$e');
    }

    return false;
  }
}
